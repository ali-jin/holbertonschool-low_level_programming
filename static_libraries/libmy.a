!<arch>
0-isupper.o/    0           0     0     644     238       `
#include <stdio.h>
#include "main.h"
/* more headers goes there */

/**
 * _isupper - Entry point
 * @c: character
 *
 * Return: Always 0 (Success)
 */
int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
{
return (1);
}
else
{
return (0);
}
}0-memset.o/     0           0     0     644     292       `
#include <stdio.h>
#include "main.h"

/**
 * _memset - Entry point
 * @s: pointer
 * @b: character
 * @n: unsigned integer
 *
 * Return: Always s (Success)
 */
char *_memset(char *s, char b, unsigned int n)
{
	char c = b;
	char *ch;

	for (ch = s; n > 0; ++ch, --n)
		*ch = c;
	return (s);
}
0-strcat.o/     0           0     0     644     349       `
#include <stdio.h>
#include <string.h>
#include "main.h"

/**
 * _strcat - Entry point
 * @dest: pointer string
 * @src: pointer string
 *
 * Return: dest (Success)
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int len = strlen(dest);

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[len + i] = src[i];
	}
	dest[len + i] = '\0';
	return (dest);
}

1-isdigit.o/    0           0     0     644     203       `
#include <stdio.h>
#include "main.h"

/**
 * _isdigit - Entry point
 * @c: digit
 *
 * Return: 1 or 0 (Success)
 */
int _isdigit(int c)
{
if (c >= '0' && c <= '9')
{
return (1);
}
else
{
return (0);
}
}

1-memcpy.o/     0           0     0     644     308       `
#include <stdio.h>
#include "main.h"

/**
 * _memcpy - Entry point
 * @dest: pointer
 * @src: pointer
 * @n: unsigned integer
 *
 * Return: Always s (Success)
 */
char *_memset(char *s, char b, unsigned int n)
{
	char *d = s;
	char *s = b;
	int i;

	for (i = n - 1; i >= 0; i--)
		d[i] = s[i];
	return (s);
}1-strncat.o/    0           0     0     644     405       `
#include <stdio.h>
#include <string.h>
#include "main.h"

/**
 * _strncat - Entry point
 * @dest: pointer string
 * @src: pointer string
 * @n: integer
 *
 * Return: dest (Success)
 */
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int len = _strlen(dest);

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[len + i] = src[i];
	}
	dest[len + i] = '\0';
	return (dest);
}
100-atoi.o/     0           0     0     644     88        `
#include <stdio.h>
#include <string.h>
#include "main.h"

int _atoi(char *s)
{

}2-strchr.o/     0           0     0     644     260       `
#include <stdio.h>
#include "main.h"

/**
 * _strchr - Entry point
 * @s: pointer
 * @c: character
 *
 * Return: character(s) or null (Success)
 */
char *_strchr(char *s, char c)
{
	do {
		if (*s == c)
		{
			return (s);
		}
	} while (*s++);
2-strlen.o/     0           0     0     644     214       `
#include <stdio.h>
#include "main.h"

/**
 * _strlen - Entry point
 * @s: string
 *
 * Return: Always 0 (Success)
 */
int _strlen(char *s)
{
	int i = 0;

	while (*s != '\0')
	{
		i++;
		s++;

	}
2-strncpy.o/    0           0     0     644     366       `
#include <stdio.h>
#include <string.h>
#include "main.h"

/**
 * _strncpy - Entry point
 * @dest: pointer string
 * @src: pointer string
 * @n: integer
 *
 * Return: dest (Success)
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];
	for ( ; i < n; i++)
		dest[i] = '\0';
}
3-islower.o/    0           0     0     644     257       `
#include <stdio.h>
#include "main.h"
/* more headers goes there */

/**
 * _islower - Entry point
 * @c: character
 *
 * Return: Always 0 (Success)
 */
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
{
return (1);
}
else
{
return (0);
}

3-puts.o/       0           0     0     644     203       `
#include <stdio.h>
#include "main.h"

/**
 * _puts - Entry point
 * @str: string
 *
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}

3-strcmp.o/     0           0     0     644     387       `
#include <stdio.h>
#include <string.h>
#include "main.h"

/**
 * _strcmp - Entry point
 * @s1: pointer string
 * @s2: pointer string
 *
 * Return: result of _strcmp (Success)
 */
int _strcmp(char *s1, char *s2)
{
	while ((*s1 != '\0' && *s2 != '\0') && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	if (*s1 == *s2)
	{
		return (0);
	}
	else
	{
		return (*s1 - *s2);
	}
}

3-strspn.o/     0           0     0     644     416       `
#include <stdio.h>
#include "main.h"

/**
 * _strspn - Entry point
 * @s: pointer
 * @accept: pointer
 *
 * Return: character(s) or null (Success)
 */
unsigned int _strspn(char *s, char *accept)
{
	char *p, *str = s;
	char c;

	while ((c = *s++) != '\0')
	{
		for (p = accept; *p != '\0'; ++p)
			if (*p == c)
			break;
		if (*p == '\0')
			return (s - str - 1);
	}
	return (s - str - 1);
}
4-isalpha.o/    0           0     0     644     311       `
#include <stdio.h>
#include "main.h"
/* more headers goes there */

/**
 * _isalpha - Entry point
 * @c: character
 *
 * Return: Always 0 (Success)
 */
int _isalpha(int c)
{
if (c >= 'A' && c <= 'Z')
{
return (1);
}
else if (c >= 'a' && c <= 'z')
{
return (1);
}
else
{
return (0);
}
}

4-strpbrk.o/    0           0     0     644     353       `
#include <stdio.h>
#include "main.h"

/**
 * _strpbrk - Entry point
 * @s: pointer
 * @accept: pointer
 *
 * Return: character(s) or null (Success)
 */
char *_strpbrk(char *s, char *accept)
{
	while (*s != '\0')
	{
		char *a = accept;

		while (*a != '\0')
		{
			if (*a++ == *s)
				return (s);
		}
		++s;
	}
	return (NULL);
}

5-strstr.o/     0           0     0     644     725       `
#include <stdio.h>
#include "main.h"

/**
 * compare - Entry point
 * @c1: pointer
 * @c2: pointer
 *
 * Return: 0 or \0 (Success)
 */
int compare(char *c1, char *c2)
{
	while (*c1 && *c2)
	{
		if (*c1 != *c2)
		{
			return (0);
		}
		c1++;
		c2++;
	}
	return (*c2 == '\0');
}

/**
 * _strstr - Entry point
 * @haystack: pointer
 * @needle: pointer
 *
 * Return: character(s) or null (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	char *hay = haystack;
	char *nee = needle;

	while (*hay != '\0')
	{
		if (*hay == *nee && compare(hay, nee) != 0)
		{
			return (hay);
		}
		else if (compare(hay, nee) != 0)
		{
			return (hay);
		}
		hay++;
	}
	return (NULL);
}

6-abs.o/        0           0     0     644     247       `
#include <stdio.h>
#include "main.h"
/* more headers goes there */

/**
 * _abs - Entry point
 * @n: number
 *
 * Return: Number (Success)
 */
int _abs(int n)
{
if (n < 0)
{
n = (-1) * n;
return (n);
}
else
{
return (n);
}
}

9-strcpy.o/     0           0     0     644     355       `
es (20 sloc) 309 Bytes
#include <stdio.h>
#include <string.h>
#include "main.h"

/**
 * _strcpy - Entry point
 * @dest: pointer
 * @src: pointer string
 *
 * Return: Always dest (Success)
 */
char *_strcpy(char *dest, char *src)
{
	int i;
	int n = strlen(src);

	for (i = 0; i <= n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

_putchar.o/     0           0     0     644     0         `
